# GestionnaireContact - Backend (Server)

Ce dossier contient le serveur backend de l'application GestionnaireContact. Il gère la logique métier, l'accès aux données et expose une API RESTful pour la gestion des contacts.

## Technologies utilisées

- Node.js
- Express.js
- MongoDB (avec Mongoose)
- dotenv (gestion des variables d'environnement)
- JWT (authentification)
- bcrypt (hash des mots de passe)
- CORS
- mongoose-unique-validator

## Structure du projet

- `backend/` : Dossier contenant le code source du serveur
- `frontend/` : Dossier contenant le client (voir README du client)
- `server.js` : Point d'entrée du serveur (à définir lors du `npm init`)
- `.gitignore` : Fichier pour ignorer `/node_modules`

## Installation

1. **Cloner le dépôt :**
    ```
    git clone <url-du-repo>
    cd backend
    ```

2. **Initialiser le projet Node.js :**
    ```
    npm init
    ```
    > **Attention :** Lors de l'initialisation, définissez bien `server.js` comme point d'entrée.

3. **Créer le fichier `.gitignore` dans le dossier backend :**
    ```
    /node_modules
    ```

4. **Installer les dépendances principales :**
    ```
    npm install
    ```

5. **Installer nodemon pour le développement :**
    ```
    npm install -g nodemon
    ```

6. **Installer les dépendances nécessaires au projet :**
    ```
    npm install express mongoose dotenv cors
    npm install --force mongoose-unique-validator
    npm install bcrypt
    npm install jsonwebtoken
    ```

7. **Installer les dépendances de test :**
    ```
    npm install --save-dev jest supertest @types/jest
    ```


## Démarrage

Pour lancer le serveur en développement :
```
nodemon server.js
```
ou
```
node server.js
```

## Tests

Le projet inclut une suite complète de tests unitaires utilisant Jest pour tester l'authentification et la gestion des contacts.

### Structure des tests

Les tests sont organisés dans le dossier `__tests__/` avec la structure suivante :
- `__tests__/middleware/` - Tests du middleware d'authentification
- `__tests__/Controllers/` - Tests des contrôleurs User et Contact
- `__tests__/Models/` - Tests des modèles User et Contact

### Commandes de test

   **Installer les dépendances de test :**
   ```
   npm install --save-dev jest supertest @types/jest
   ```

   **N'hésitez pas à utiliser --force si ça ne passe pas :**
   ```
   npm install --force --save-dev jest supertest @types/jest
   ```

1. **Exécuter tous les tests :**
   ```
   npm test
   ```

2. **Exécuter les tests en mode watch (surveillance) :**
   ```
   npm run test:watch
   ```

3. **Exécuter les tests avec rapport de couverture :**
   ```
   npm run test:coverage
   ```

### Types de tests inclus

#### Tests d'authentification (`auth.test.js`)
- Validation des tokens JWT valides
- Gestion des tokens invalides ou expirés
- Gestion des headers Authorization manquants ou malformés
- Extraction correcte des tokens du format "Bearer token"

#### Tests des contrôleurs User (`User.test.js`)
- **Inscription (signup) :**
  - Création d'utilisateur avec succès
  - Gestion des erreurs de hachage bcrypt
  - Gestion des erreurs de sauvegarde en base
- **Connexion (login) :**
  - Connexion avec identifiants valides
  - Gestion des utilisateurs inexistants
  - Gestion des mots de passe incorrects
  - Gestion des erreurs de base de données

#### Tests des contrôleurs Contact (`Contact.test.js`)
- **Création de contact :**
  - Création avec succès
  - Gestion des erreurs de sauvegarde
- **Suppression de contact :**
  - Suppression avec succès
  - Gestion des erreurs de suppression
- **Modification de contact :**
  - Modification avec succès
  - Gestion des erreurs de mise à jour
- **Récupération de contacts :**
  - Récupération d'un contact spécifique
  - Récupération de tous les contacts
  - Gestion des contacts inexistants
- **Sécurité :**
  - Isolation des utilisateurs (chaque utilisateur ne peut accéder qu'à ses propres contacts)

#### Tests des modèles (`User.test.js` et `Contact.test.js`)
- **Modèle User :**
  - Validation du schéma avec email unique et mot de passe requis
  - Validation des emails valides/invalides
  - Application du plugin uniqueValidator
- **Modèle Contact :**
  - Validation du schéma avec tous les champs requis
  - Validation des différents formats de numéros de téléphone
  - Validation des URLs d'images

### Configuration Jest

La configuration Jest est définie dans `package.json` :
- Environnement Node.js
- Collecte de couverture pour tous les fichiers `.js` (sauf `node_modules` et `coverage`)
- Recherche des tests dans `__tests__/` et fichiers avec `.spec.js` ou `.test.js`

### Exécution des tests

Après avoir installé les dépendances, vous pouvez exécuter les tests avec les commandes ci-dessus. Les tests utilisent des mocks pour isoler les unités testées et ne nécessitent pas de connexion à une base de données réelle.

## Auteur

- Adam SIDHOUM
